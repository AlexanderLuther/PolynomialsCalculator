options {
    STATIC = false;
}

PARSER_BEGIN(Parser)
    
package com.hluther.parser;
import com.hluther.gui.PrincipalFrame;

public class Parser {
        
    private Integer valx;
    private Integer valy;;
    private Integer valz;
    private PrincipalFrame principalFrame;

    public Parser(Integer valx,Integer valy,Integer valz){
        this.valx=valx;
        this.valy=valy;
        this.valz=valz;
    }

    public void setPrincipalFrame(PrincipalFrame principalFrame){
        this.principalFrame = principalFrame;
    }

    public Integer getValx(){
        return this.valx;
    }

    public Integer getValy(){
        return this.valy;
    }    

    public Integer getValz(){
        return this.valz;
    }
}

PARSER_END(Parser)

SKIP  : { " " | "\n" | "\r" | "\r\n" }
TOKEN : { < MAS : "+" > | < MENOS : "-" > | < MUL : "*" > | < DIV : "/" >}
TOKEN : { < LETRAX : "X" > | < LETRAY : "Y" > | < LETRAZ : "Z" >}
TOKEN : { < IGUAL : "=" > }
TOKEN : { < PUNTOCOMA : ";" > | < COMA : "," >}
TOKEN : { < NUMBER : (["0"-"9"])+ > }

void start(): {Parser letras; Integer resultadoFinal;}{
    letras=Z() resultadoFinal=X(letras) { principalFrame.printProcess("El resultado es: " + resultadoFinal); }
}

Parser Z(): { Token valx; Token valy; Token valz;}{
    <LETRAX> <IGUAL> valx=<NUMBER> <COMA> <LETRAY> <IGUAL> valy=<NUMBER> <COMA> <LETRAZ> <IGUAL> valz=<NUMBER> <PUNTOCOMA> 
    { return new Parser(Integer.parseInt(valx.image), Integer.parseInt(valy.image), Integer.parseInt(valz.image)); }
}
int X(Parser letras): { Integer numero; Integer resultado; }{    
    numero=T(letras) resultado=XP(numero, letras) { return resultado; }
}

int XP(int val, Parser letras): { Integer numero; Integer resultado; }{
    <MAS> numero=T(letras) resultado=XP(val+numero, letras) { return resultado; }
    | <MENOS> numero=T(letras) resultado=XP(val-numero, letras) { return resultado; }
    | { return val; }
}

int T(Parser letras): { Integer numero; Integer resultado; }{
    numero=F(letras) resultado=TP(numero, letras)  { return resultado; }
}

int TP(Integer val, Parser letras): { Integer numero; Integer resultado; }{
    <MUL> numero=F(letras) resultado=TP(val*numero, letras)  { return resultado; }
    | <DIV> numero=F(letras) resultado=TP(val/numero, letras) { return resultado; }                       
    | { return val; }                                                    
}

int F(Parser letras): { Token numero; }{
    numero=<NUMBER> { return Integer.parseInt(numero.image); }
    | <LETRAX> { return letras.getValx(); }
    | <LETRAY> { return letras.getValy(); }
    | <LETRAZ> { return letras.getValz(); }
}







